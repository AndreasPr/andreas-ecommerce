{"ast":null,"code":"var _jsxFileName = \"C:\\\\React Projects\\\\andreas-ecommerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections'); // --------- Promise Pattern ---------------\n\n    fetch('https://firestore.googleapis.com/v1/projects/react-ecommerce-db-5e9a1/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections));\n    collectionRef.get().then(snapShot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    }); // --------- Observer Pattern ---------------\n    // collectionRef.onSnapshot(async snapShot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({loading: false});\n    // });\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 72\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 80\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/React Projects/andreas-ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","Route","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapshotToMap","connect","updateCollections","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","response","json","collections","console","log","get","snapShot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACN,mBAAD,CAAlD;AACA,MAAMQ,yBAAyB,GAAGF,WAAW,CAACL,cAAD,CAA7C;;AAEA,MAAMQ,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAUlCC,KAVkC,GAU1B;AACJC,MAAAA,OAAO,EAAE;AADL,KAV0B;AAAA,SAcjCC,uBAdiC,GAcP,IAdO;AAAA;;AAgBjCC,EAAAA,iBAAiB,GAAE;AAChB,UAAM;AAACT,MAAAA;AAAD,QAAsB,KAAKU,KAAjC;AACA,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CAFgB,CAIhB;;AACAC,IAAAA,KAAK,CAAC,iHAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAFrB;AAKAN,IAAAA,aAAa,CAACS,GAAd,GAAoBN,IAApB,CAAyBO,QAAQ,IAAI;AACjC,YAAMC,cAAc,GAAGxB,+BAA+B,CAACuB,QAAD,CAAtD;AACArB,MAAAA,iBAAiB,CAACsB,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAChB,QAAAA,OAAO,EAAE;AAAV,OAAd;AACH,KAJD,EAVgB,CAgBhB;AACA;AACA;AACA;AACA;AACA;AACF;;AAGFiB,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKf,KAArB;AACA,UAAM;AAACH,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEmB,KAAK,CAACC,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGhB,KAAD,iBAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEH;AAA3C,SAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEe,KAAK,CAACC,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGhB,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAgBH;;AA5DiC;;AA+DtC,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACpC5B,EAAAA,iBAAiB,EAAEsB,cAAc,IAAIM,QAAQ,CAAC5B,iBAAiB,CAACsB,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIA,eAAevB,OAAO,CAAC,IAAD,EAAO4B,kBAAP,CAAP,CAAkCvB,QAAlC,CAAf","sourcesContent":["import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {connect} from 'react-redux';\r\nimport {updateCollections} from '../../redux/shop/shop.actions';\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component{\r\n\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state = {\r\n    //         loading: true\r\n    //     }\r\n    // }\r\n    //It is exactly the same with the above (simplified way).React knows that if we have a class component \r\n    //and we write the state property like so, we just have an invoked state - (invocation of the super() in constructor)\r\n    state = {\r\n        loading: true\r\n    }\r\n\r\n     unsubscribeFromSnapshot = null;\r\n\r\n     componentDidMount(){\r\n        const {updateCollections} = this.props;\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        // --------- Promise Pattern ---------------\r\n        fetch('https://firestore.googleapis.com/v1/projects/react-ecommerce-db-5e9a1/databases/(default)/documents/collections')\r\n        .then(response => response.json())\r\n        .then(collections => console.log(collections));\r\n\r\n        \r\n        collectionRef.get().then(snapShot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\r\n            updateCollections(collectionsMap);\r\n            this.setState({loading: false});\r\n        });\r\n\r\n        // --------- Observer Pattern ---------------\r\n        // collectionRef.onSnapshot(async snapShot => {\r\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({loading: false});\r\n        // });\r\n     }\r\n\r\n\r\n    render(){\r\n        const {match} = this.props;\r\n        const {loading} = this.state;\r\n        return(\r\n            <div className='shop-page'>\r\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={loading} {...props}/> } />\r\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={loading} {...props}/> } />\r\n            \r\n            {/* When you use the component props, the router uses React.createElement to create a new React element\r\n            from the given component. That means if you provide an inline function to the component attribute, you \r\n            would create a new component every render. This results in the existing \r\n            component unmounting and the new component mounting instead of just updating the existing component.\r\n            \r\n            So, if you need to pass a prop (In our case \"loading\") to a component being rendered by React Router,\r\n             instead of using Routes component prop, use its render prop passing it an inline function then \r\n             pass along the arguments to the element youâ€™re creating. */}\r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}