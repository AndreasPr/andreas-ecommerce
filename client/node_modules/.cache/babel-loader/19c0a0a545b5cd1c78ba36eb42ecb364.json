{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'; //This action switches our reducers \"isFetching\" state \n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n}); //This is the actual function that we pass into components to begin this process\n\nexport const fetchCollectionsStartAsync = () => {\n  // Return the function that gets a dispatch\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); //Because of redux-thunk library, we are dispatching the moment that this function gets called \n\n    dispatch(fetchCollectionsStart()); // Begins the Asynchronous request...\n\n    collectionRef.get().then(snapShot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapShot); // Dispatch this success once this asynchronous request resolved \n\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});","map":{"version":3,"sources":["C:/React Projects/andreas-ecommerce/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapShot","collectionsMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_SUCCESS","payload","errorMessage","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD,C,CAEA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B,C,CAIP;;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC5C;AACA,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB,CADe,CAGf;;AACAF,IAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR,CAJe,CAMf;;AACAK,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMC,cAAc,GAAGX,+BAA+B,CAACU,QAAD,CAAtD,CADiC,CAGjC;;AACAL,MAAAA,QAAQ,CAACO,uBAAuB,CAACD,cAAD,CAAxB,CAAR;AACH,KALD,EAKGE,KALH,CAKSC,KAAK,IAAIT,QAAQ,CAACU,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAL1B;AAMH,GAbD;AAcH,CAhBM;AAkBP,OAAO,MAAMJ,uBAAuB,GAAID,cAAD,KAAqB;AACxDT,EAAAA,IAAI,EAAEJ,eAAe,CAACmB,yBADkC;AAExDC,EAAAA,OAAO,EAAEP;AAF+C,CAArB,CAAhC;AAKP,OAAO,MAAMI,uBAAuB,GAAII,YAAD,KAAmB;AACtDjB,EAAAA,IAAI,EAAEJ,eAAe,CAACsB,yBADgC;AAEtDF,EAAAA,OAAO,EAAEC;AAF6C,CAAnB,CAAhC","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\n//This action switches our reducers \"isFetching\" state \r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\n//This is the actual function that we pass into components to begin this process\r\nexport const fetchCollectionsStartAsync = () => {\r\n    // Return the function that gets a dispatch\r\n    return dispatch => {\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        //Because of redux-thunk library, we are dispatching the moment that this function gets called \r\n        dispatch(fetchCollectionsStart());\r\n\r\n        // Begins the Asynchronous request...\r\n        collectionRef.get().then(snapShot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\r\n\r\n            // Dispatch this success once this asynchronous request resolved \r\n            dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    }\r\n}\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});"]},"metadata":{},"sourceType":"module"}