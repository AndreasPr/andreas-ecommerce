{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get(); // signInSuccess update the user reducer using the object we are passing\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    // We are taking the auth user object with the details of the user for each user key  \n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signOut() {}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n;\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}\n;","map":{"version":3,"sources":["C:/React Projects/andreas-ecommerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\nimport {UserActionTypes} from './user.types';\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport {signInSuccess, signInFailure} from './user.actions';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        // signInSuccess update the user reducer using the object we are passing\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\nexport function* signInWithGoogle(){\r\n    try{\r\n        // We are taking the auth user object with the details of the user for each user key  \r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\nexport function* signInWithEmail({payload: {email, password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth){\r\n            return;\r\n        }\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signOut(){\r\n\r\n};\r\n\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n};\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n};\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n};\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, );\r\n}\r\nexport function* userSagas(){\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\r\n};"]},"metadata":{},"sourceType":"module"}