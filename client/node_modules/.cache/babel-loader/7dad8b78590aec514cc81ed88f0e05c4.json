{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDNXN9QJ-P5-ciRm89o99OQhzqzhw5QZgo\",\n  authDomain: \"react-ecommerce-db-5e9a1.firebaseapp.com\",\n  databaseURL: \"https://react-ecommerce-db-5e9a1.firebaseio.com\",\n  projectId: \"react-ecommerce-db-5e9a1\",\n  storageBucket: \"react-ecommerce-db-5e9a1.appspot.com\",\n  messagingSenderId: \"366510925339\",\n  appId: \"1:366510925339:web:aa1ccc3703d606ab4b3abe\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  } // We query from database for Document reference object based on userAuth Object\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //Using the UserReference, we call the get() to take the Snapshot Object \n\n  const snapShot = await userRef.get(); // Even if we don't have actual User Object in database, firestore would give us a snapshot object \n  // and we check if exists or not.\n  // if does not exist...\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create a new Document Object inside of UserRef and database, using the set()\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectinAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/React Projects/andreas-ecommerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectinAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,0CAFD;AAGXC,EAAAA,WAAW,EAAE,iDAHF;AAIXC,EAAAA,SAAS,EAAE,0BAJA;AAKXC,EAAAA,aAAa,EAAE,sCALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AACxE,MAAG,CAACD,QAAJ,EACA;AACI;AACH,GAJuE,CAMxE;;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAPwE,CAQxE;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CATwE,CAWxE;AACA;AACA;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EACA;AACI,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACC;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AAACJ,QAAAA,WAAD;AAAcC,QAAAA,KAAd;AAAqBC,QAAAA,SAArB;AAAgC,WAAGV;AAAnC,OAAZ,CAAN;AACH,KAHD,CAIA,OAAMa,KAAN,EAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AACJ;;AAED,SAAOf,OAAP;AACH,CA5BM;AAgCP,OAAO,MAAMgB,wBAAwB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACrE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AAEH,CAJM;AAQP/B,QAAQ,CAACiC,aAAT,CAAuBhC,MAAvB;AAEA,OAAO,MAAMiC,IAAI,GAAGlC,QAAQ,CAACkC,IAAT,EAAb;AACP,OAAO,MAAMrB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMsB,QAAQ,GAAG,IAAInC,QAAQ,CAACkC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAenC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDNXN9QJ-P5-ciRm89o99OQhzqzhw5QZgo\",\r\n    authDomain: \"react-ecommerce-db-5e9a1.firebaseapp.com\",\r\n    databaseURL: \"https://react-ecommerce-db-5e9a1.firebaseio.com\",\r\n    projectId: \"react-ecommerce-db-5e9a1\",\r\n    storageBucket: \"react-ecommerce-db-5e9a1.appspot.com\",\r\n    messagingSenderId: \"366510925339\",\r\n    appId: \"1:366510925339:web:aa1ccc3703d606ab4b3abe\"\r\n};\r\n\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if(!userAuth)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // We query from database for Document reference object based on userAuth Object\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    //Using the UserReference, we call the get() to take the Snapshot Object \r\n    const snapShot = await userRef.get();\r\n    \r\n    // Even if we don't have actual User Object in database, firestore would give us a snapshot object \r\n    // and we check if exists or not.\r\n    // if does not exist...\r\n    if(!snapShot.exists)\r\n    {\r\n        const {displayName, email} = userAuth;\r\n        const createdAt = new Date();\r\n        try{\r\n            // create a new Document Object inside of UserRef and database, using the set()\r\n            await userRef.set({displayName, email, createdAt, ...additionalData})\r\n        }\r\n        catch(error){\r\n            console.log(\"Error creating user\", error.message);\r\n        }  \r\n    }\r\n\r\n    return userRef;\r\n};\r\n\r\n\r\n\r\nexport const addCollectinAndDocuments = (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    console.log(collectionRef);\r\n\r\n};\r\n\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}