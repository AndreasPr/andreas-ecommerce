{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n\n  try {\n    // When the value comes back (from collectionRef.get()), it comes back with a promised \n    // form that gets resolved with the value of our collection ref which is snapshot.\n    // This means that the value goes into this yield statement and it will set into the snapshot value that\n    // we have declared\n    const snapShot = yield collectionRef.get(); // We are yielding this call, so it allows us to defer control at this point of the execution back to \n    // the saga middleware\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapShot);\n  } catch (error) {} // Begins the Asynchronous request...\n  // collectionRef.get().then(snapShot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n  //     // Dispatch this success once this asynchronous request resolved \n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/React Projects/andreas-ecommerce/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapShot","get","collectionsMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;;AAEA,MAAG;AACH;AACA;AACA;AACA;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CALG,CAMH;AACA;;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACI,+BAAD,EAAkCQ,QAAlC,CAAjC;AAEC,GAVD,CAUC,OAAMG,KAAN,EAAY,CAEZ,CAjBmC,CAqBhC;AACA;AACA;AAEA;AACA;AACA;;AACP;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMjB,SAAS,CAACG,eAAe,CAACe,uBAAjB,EAA0CV,qBAA1C,CAAf;AACH","sourcesContent":["import {takeEvery, call, put} from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.actions';\r\n\r\nexport function* fetchCollectionsAsync(){\r\n    yield console.log('I am fired');\r\n\r\n    const collectionRef = firestore.collection('collections');\r\n\r\n    try{\r\n    // When the value comes back (from collectionRef.get()), it comes back with a promised \r\n    // form that gets resolved with the value of our collection ref which is snapshot.\r\n    // This means that the value goes into this yield statement and it will set into the snapshot value that\r\n    // we have declared\r\n    const snapShot = yield collectionRef.get();\r\n    // We are yielding this call, so it allows us to defer control at this point of the execution back to \r\n    // the saga middleware\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapShot);  \r\n    \r\n    }catch(error){\r\n        \r\n    }\r\n\r\n\r\n\r\n        // Begins the Asynchronous request...\r\n        // collectionRef.get().then(snapShot => {\r\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\r\n\r\n        //     // Dispatch this success once this asynchronous request resolved \r\n        //     dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        // }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\r\n}"]},"metadata":{},"sourceType":"module"}